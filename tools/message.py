from email.headerregistry import ContentTypeHeader
from settings import *
from .buttons import *
from .States import *
from models.users import User

@dp.message_handler(commands=['start', 'restart'])
async def start(message: types.Message):
    id = str(message.chat.id)
    message.bot.user_data[id] = User(id, "@" + message.chat.username, message.chat.first_name) # –°–æ–∑–¥–∞–Ω–∏–µ –º–æ–¥–µ–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏

    await bot.send_message(
        message.chat.id,
        "üá∑üá∫Ô∏è –£–≤–∞–∂–∞–µ–º—ã–π {0.first_name} ‚ùó\n"
        "–í–Ω–∏–º–∞—Ç–µ–ª—å–Ω–æ —á–∏—Ç–∞–π—Ç–µ –∏ –¥–µ–ª–∞–π—Ç–µ —á—Ç–æ –≤–∞–º –ø–∏—à—É—Ç, –∏ –ø—Ä–æ–±–ª–µ–º –Ω–µ –±—É–¥–µ—Ç.\n"
        "–ù–∞–∂–º–∏ –ù–ê–ß–ê–¢–¨  –Ω–∞ –∫–Ω–æ–ø–∫–µ —Å–Ω–∏–∑—ÉüëáÔ∏è–∏ –º—ã –Ω–∞—á–Ω–µ–º\n"
        .format(message.from_user), reply_markup=keyboard1)


# -------------------------------------------- –ë–ª–æ–∫ –¥–ª—è –≤—ã–±–æ—Ä–∞ —Ç–∏–ø–∞ —Ä–∞–±–æ—Ç

@dp.callback_query_handler(lambda call: call.data == 'st.start')
async def Type_of_subject_entry(call: types.CallbackQuery):

    await bot.send_message(
        call.message.chat.id,
        "–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–µ–¥–º–µ—Ç —Å –∫–æ—Ç–æ—Ä–æ–π –≤–∞–º –Ω—É–∂–Ω–∞ –ø–æ–º–æ—â—åüëáÔ∏è\n"
        .format(call.message.from_user), reply_markup=type_of_subject)


@dp.callback_query_handler(text_contains='tps.')
async def Type_of_work_entry(call: types.CallbackQuery):

    await bot.send_message(
        call.message.chat.id,
        "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø —Ä–∞–±–æ—Ç —Å –∫–æ—Ç–æ—Ä–æ–π –≤–∞–º –Ω—É–∂–Ω–∞ –ø–æ–º–æ—â—åüëáÔ∏è\n"
        .format(call.message.from_user), reply_markup=type_of_work)

    id = str(call.message.chat.id)
    call.bot.user_data[id].Type_of_subject = str(call.data) # user's kind of subject

# --------------------------------------------

@dp.callback_query_handler(text_contains='tpw.')
async def Date(call):

    await Form.Type_of_work.set()

    if call.data == "tpw.–≠–∫–∑–∞–º–µ–Ω":
        await bot.send_message(call.message.chat.id,
                       "–ù–∞–ø–∏—à–∏—Ç–µ –¥–∞—Ç—É –ø—Ä–æ–≤–µ–¥–µ–Ω–∏—è —ç–∫–∑–∞–º–µ–Ω–∞üëá"
                       .format(call.message.from_user))

    if call.data == "tpw.–ö–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è":
        await bot.send_message(call.message.chat.id,
                       "–ù–∞–ø–∏—à–∏—Ç–µ –¥–∞—Ç—É –∫ –∫–æ—Ç–æ—Ä–æ–π –Ω—É–∂–Ω–æ –ø—Ä–æ–≤–µ—Å—Ç–∏ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—éüëá"
                       .format(call.message.from_user))

    if call.data == "tpw.–î–æ–º–∞—à–Ω—è—è_—Ä–∞–±–æ—Ç–∞": # —É—Ç–æ—á–Ω–∏—Ç—å –ø–æ –ø–æ–≤–æ–¥—É —Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–∫–∏
        await bot.send_message(call.message.chat.id,
                       "–ù–∞–ø–∏—à–∏—Ç–µ –¥–∞—Ç—É –∫ –∫–æ—Ç–æ—Ä–æ–π –Ω—É–∂–Ω–æ –ø—Ä–æ–≤–µ—Å—Ç–∏ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—éüëá"
                       .format(call.message.from_user))

    id = str(call.message.chat.id)
    call.bot.user_data[id].Type_of_work = str(call.data) # user's kind of work

    await Form.next()


@dp.message_handler(state=Form.Date)
async def Time_handler(message: types.Message, state: FSMContext):
    if message.text not in ["/start", "/restart"]:

        UDate = message.text

        id = str(message.chat.id)
        message.bot.user_data[id].Date = UDate

        if bot.user_data[id].Type_of_work == "tpw.–≠–∫–∑–∞–º–µ–Ω":
            await bot.send_message(
                message.chat.id,
                "–ù–∞–ø–∏—à–∏—Ç–µ –≤—Ä–µ–º—è –ø—Ä–æ–≤–µ–¥–µ–Ω–∏—è —ç–∫–∑–∞–º–µ–Ω–∞üëá\n")

        elif bot.user_data[id].Type_of_work == "tpw.–ö–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è":
            await bot.send_message(
                message.chat.id,
                "–ù–∞–ø–∏—à–∏—Ç–µ –≤—Ä–µ–º—è –ø—Ä–æ–≤–µ–¥–µ–Ω–∏—è –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏üëá\n")

        elif bot.user_data[id].Type_of_work == "tpw.–î–æ–º–∞—à–Ω—è—è_—Ä–∞–±–æ—Ç–∞":
            await bot.send_message(
                message.chat.id,
                "–ù–∞–ø–∏—à–∏—Ç–µ –≤—Ä–µ–º—è –ø—Ä–æ–≤–µ–¥–µ–Ω–∏—è –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏üëá\n")

        await Form.next()
    else:
        await state.finish()


@dp.message_handler(state=Form.Time)
async def Tasks_handler(message: types.Message, state: FSMContext):
    if message.text not in ["/start", "/restart"]:

        UTime = message.text

        id = str(message.chat.id)
        message.bot.user_data[id].Time = UTime

        if bot.user_data[id].Type_of_work == "tpw.–≠–∫–∑–∞–º–µ–Ω":
            await bot.send_message(
                message.chat.id,
                "–ù–∞–ø–∏—à–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–¥–∞—á –Ω–∞ —ç–∫–∑–∞–º–µ–Ω–µ\n")

        elif bot.user_data[id].Type_of_work == "tpw.–ö–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è":
            await bot.send_message(
                message.chat.id,
                "–ù–∞–ø–∏—à–∏—Ç–µ —Ç–µ–º—É –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏ –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ 1 —Ñ–æ—Ç–æ\n")

        elif bot.user_data[id].Type_of_work == "tpw.–î–æ–º–∞—à–Ω—è—è_—Ä–∞–±–æ—Ç–∞":
            await bot.send_message(
                message.chat.id,
                "–ù–∞–ø–∏—à–∏—Ç–µ —Å–∫–æ–ª—å–∫–æ –∑–∞–¥–∞—á –Ω—É–∂–Ω–æ —Ä–∞–∑–æ–±—Ä–∞—Ç—å –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ 1 —Ñ–æ—Ç–æüëá\n")

        await Form.next()
    else:
        await state.finish()


@dp.message_handler(state=Form.Tasks, content_types=['text', 'document', 'photo'])
async def Htowrite_handler(message: types.Message, state: FSMContext):
    if message.text not in ["/start", "/restart"]:

        try:
            idphoto = message.photo[-1].file_id
            id = str(message.chat.id)
            bot.user_data[id].Photos = idphoto

        except:
            UTasks = message.text
            id = str(message.chat.id)
            message.bot.user_data[id].Tasks = UTasks


        if bot.user_data[id].Type_of_work == "tpw.–≠–∫–∑–∞–º–µ–Ω":
            await bot.send_message(
                message.chat.id,
                "–ù–∞–ø–∏—à–∏—Ç–µ —Å–∫–æ–ª—å–∫–æ –≤—Ä–µ–º–µ–Ω–∏ –¥–∞—é—Ç –Ω–∞ —Ä–µ—à–µ–Ω–∏–µ –∑–∞–¥–∞—áüëá\n")

        elif bot.user_data[id].Type_of_work == "tpw.–ö–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è":
            await bot.send_message(
                message.chat.id,
                "–ù–∞–ø–∏—à–∏—Ç–µ —Å–∫–æ–ª—å–∫–æ –ø—Ä–∏–º–µ—Ä–Ω–æ –≤—Ä–µ–º–µ–Ω–∏ –ø–æ–Ω–∞–¥–æ–±–∏—Ç—å—Å—è –Ω–∞ —Ä–µ—à–µ–Ω–∏–µ –∑–∞–¥–∞—áüëá\n")

        elif bot.user_data[id].Type_of_work == "tpw.–î–æ–º–∞—à–Ω—è—è_—Ä–∞–±–æ—Ç–∞":
            await bot.send_message(
                message.chat.id,
                "–ù–∞–ø–∏—à–∏—Ç–µ —Å–∫–æ–ª—å–∫–æ –ø—Ä–∏–º–µ—Ä–Ω–æ –≤—Ä–µ–º–µ–Ω–∏ –ø–æ–Ω–∞–¥–æ–±–∏—Ç—å—Å—è –Ω–∞ —Ä–µ—à–µ–Ω–∏–µ –∑–∞–¥–∞—áüëá\n")

        await Form.next()
    else:
        await state.finish()


@dp.message_handler(state=Form.Htowrite) # –ü—Ä–∏—Å–∞–±–∞—á–∏—Ç—å —Ñ–æ—Ç–æ
async def Lectur_handler(message, state: FSMContext):
    if message.text not in ["/start", "/restart"]:

        UHours_to_write = message.text
        id = str(message.chat.id)
        message.bot.user_data[id].Hours_to_write = UHours_to_write

        if bot.user_data[id].Type_of_work == "tpw.–≠–∫–∑–∞–º–µ–Ω":
            await bot.send_message(
                message.chat.id,
                "–ù–∞–ø–∏—à–∏—Ç–µ —Ñ–∞–º–∏–ª–∏—é –ª–µ–∫—Ç–æ—Ä–∞üëá\n")

        elif bot.user_data[id].Type_of_work == "tpw.–ö–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è":
            await bot.send_message(
                message.chat.id,
                "–ù–∞–ø–∏—à–∏—Ç–µ —Ñ–∞–º–∏–ª–∏—é –ª–µ–∫—Ç–æ—Ä–∞üëá\n")

        elif bot.user_data[id].Type_of_work == "tpw.–î–æ–º–∞—à–Ω—è—è_—Ä–∞–±–æ—Ç–∞":
            await bot.send_message(
                message.chat.id,
                "–ù–∞–ø–∏—à–∏—Ç–µ —Ñ–∞–º–∏–ª–∏—é –ª–µ–∫—Ç–æ—Ä–∞üëá\n")

        await Form.next()
    else:
        await state.finish()


@dp.message_handler(state=Form.Lectur)
async def Info_handler(message: types.Message, state: FSMContext):
    if message.text not in ["/start", "/restart"]:

        ULectur = message.text

        id = str(message.chat.id)
        message.bot.user_data[id].Lectur = ULectur

        await bot.send_message(
            message.chat.id,
            "Ô∏è–ù–∞–ø–∏—à–∏—Ç–µ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –∫–æ—Ç–æ—Ä—É—é —Å—Ç–æ–∏—Ç –∑–Ω–∞—Ç—å –ø—Ä–µ–∂–¥–µ —á–µ–º –º—ã —Å–≤—è–∂–µ–º—Å—è —Å –≤–∞–º–∏ :)")
        await Form.next()
    else:
        await state.finish()


@dp.callback_query_handler(text_contains='tpwd.')
async def Type_of_work_entry(call: types.CallbackQuery):

        await bot.send_message(
            call.message.chat.id,
            "Ô∏è–û–ø–∏—à–∏—Ç–µ –≤–∞—à—É –ø—Ä–æ–±–ª–µ–º—É –∏–ª–∏ –∑–∞–¥–∞—á—É —Å –∫–æ—Ç–æ—Ä–æ–π –≤–∞–º –Ω—É–∂–Ω–∞ –ø–æ–º–æ—â—å")

        await Form.Info.set()


@dp.message_handler(state=Form.Info)
async def End_handler(message: types.Message, state: FSMContext):
    if message.text not in ["/start", "/restart"]:

        UInfo = message.text

        id = str(message.chat.id)
        message.bot.user_data[id].Info = UInfo

        bot.user_data[id].Type_of_subject = str(bot.user_data[id].Type_of_subject[4:]) # user's kind of subject
        bot.user_data[id].Type_of_work = str(bot.user_data[id].Type_of_work[4:]) # user's kind of work

        json_data = check_n_load_json(BASE_JSON_FILEPATH)

        if id in json_data:
            try:
                message.bot.user_data[id].Count = int(json_data[id]["Count"].split()[-1]) + 1
            except:
                message.bot.user_data[id].Count = 1
        else:
            message.bot.user_data[id].Count = 1


        # –û—Ç–ø—Ä–∞–≤–∫–∞ –≤–ª–∞–¥–µ–ª—å—Ü—É
        await bot.send_message(
            config['meid']['id1'],
            bot.user_data[id].to_str())

        await bot.send_message(
            config['meid']['id2'],
            bot.user_data[id].to_str())

        try:
            await bot.send_photo(
                config['meid']['id1'],
                bot.user_data[id].Photos)

            await bot.send_photo(
                config['meid']['id2'],
                bot.user_data[id].Photos)
        except:
            pass


        with open(BASE_JSON_FILEPATH, "w", encoding='utf-8') as file:
            # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –ë–î
            json_data.update(bot.user_data[id].to_dict())
            # –ó–∞–ø–∏—Å—å –≤ —Ñ–∞–π–¥
            json.dump(json_data, file, indent=4, ensure_ascii=False)


        await bot.send_message(
            message.chat.id,
            "Ô∏è–°–ø–∞—Å–∏–±–æ, —á—Ç–æ –≤—ã–±—Ä–∞–ª–∏ –Ω–∞—Å, –≤ —Å–∫–æ—Ä–æ–º –≤—Ä–µ–º–µ–Ω–∏ –Ω–∞—à —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç —Å–≤—è–∂–µ—Ç—Å—è —Å –≤–∞–º–∏\n\n"
            "+Inf\n"
            "–ë–∞–∑–æ–≤–∞—è —Ü–µ–Ω–∞ —ç–∫–∑–∞–º–µ–Ω–∞—Ü–∏–æ–Ω–Ω–æ–π –∑–∞–¥–∞—á–∏ - –æ—Ç 1500 —Ä—É–±–ª–µ–π.\n\n"

            "–ü–æ—á–µ–º—É –æ—Ç? –ï—Å–ª–∏ —Ö–æ—á–µ—à—å –±—ã—Ç—å –≤—ã—à–µ –≤ –æ—á–µ—Ä–µ–¥–∏ –Ω–∞ —Ä–µ—à–µ–Ω–∏–µ, —Ç–æ –º–æ–∂–Ω–æ —Å –¥–æ–ø–ª–∞—Ç–æ–π –∑–∞ —Å—Ä–æ—á–Ω–æ—Å—Ç—å –∫ –æ—Å–Ω–æ–≤–Ω–æ–π —Å—É–º–º–µ.\n"
            " - –¢–æ –µ—Å—Ç—å –±—É–¥—É —Ä–µ—à–∞—Ç—å —Ä–∞–Ω—å—à–µ, —á–µ–º —Ç–µ–º, –∫—Ç–æ –≤–Ω—ë—Å –¥–æ–ø–ª–∞—Ç—É –∑–∞ —Å—Ä–æ—á–Ω–æ—Å—Ç—å –º–µ–Ω—å—à–µ.\n\n"

            "–¢–∞–∫ –∫–∞–∫ —è –Ω–µ –≤—Å–µ–º –∂–µ–ª–∞—é—â–∏–º —Å–º–æ–≥—É —Ä–µ—à–∏—Ç—å, –ø–æ—ç—Ç–æ–º—É –∑–∞ 1-3 –¥–Ω—è —Å–æ—Å—Ç–∞–≤–ª—é —Å–ø–∏—Å–æ–∫ –∏–∑ 3 —Ä–µ–±—è—Ç, –∫–æ–º—É —É—Å–ø–µ–≤–∞—é —Ä–µ—à–∏—Ç—å,\n"
            "–∞ –æ—Å—Ç–∞–ª—å–Ω—ã–º –≤–µ—Ä–Ω—É –∏—Ö –æ–ø–ª–∞—Ç—É/–æ—Å—Ç–∞–≤–ª—é –ø–æ –∏—Ö –∂–µ–ª–∞–Ω–∏—é –¥–æ —ç–∫–∑–∞–º–µ–Ω–∞, –≤–¥—Ä—É–≥ –∫—Ç–æ-—Ç–æ –Ω–µ —Å–∫–∏–Ω–µ—Ç –∑–∞–¥–∞—á–∏ –∏ –æ—á–µ—Ä–µ–¥—å –ø—Ä–æ–¥–≤–∏–Ω–µ—Ç—Å—è –≤–ø–µ—Ä—ë–¥.\n\n"

            "–í –¥–æ–ø–ª–∞—Ç—É –∑–∞ —Å—Ä–æ—á–Ω–æ—Å—Ç—å (–æ—Ç 500 —Ä—É–±–ª–µ–π) —Ç–∞–∫–∂–µ –±—É–¥–µ—Ç –≤—Ö–æ–¥–∏—Ç—å –ø–æ–º–æ—â—å —Å —Ç–µ–æ—Ä–µ—Ç–∏—á–µ—Å–∫–æ–π —á–∞—Å—Ç—å—é –±–∏–ª–µ—Ç–∞\n\n"

            "–ï—Å–ª–∏ –Ω–µ —Å–∫–∏–¥—ã–≤–∞–µ—à—å —É—Å–ª–æ–≤–∏–µ –∑–∞–¥–∞—á–∏, –¥–µ–Ω—å–≥–∏ –≤–æ–∑–≤—Ä–∞—â–∞—é.\n\n"

            "2202 2016 3632 9266")

        await state.finish()
    else:
        await state.finish()

@dp.message_handler(content_types='text')
async def start(message: types.Message):
    if message.text == "/all_inf":
        if str(message.chat.id) == str(config['meid']['id']):
            with open("settings/user_data.json", "rb") as fileJson:
                df = pd.read_json(fileJson)
                df.to_csv(r"settings/user_data.csv", index=False)
                with open("settings/user_data.csv", "rb") as fileCSV:
                    await bot.send_document(config['meid']['id'], fileCSV)

        else:
            await bot.send_message(
                message.chat.id,
                "–í–∞—Å —Ä–∞–∑–≤–µ —ç—Ç–æ –ø–æ–ø—Ä–æ—Å–∏–ª–∏ —Å–¥–µ–ª–∞—Ç—å‚ÅâÔ∏è")

            await bot.delete_message(message.chat.id, message.message_id)
            await asyncio.sleep(5)
            await bot.delete_message(message.chat.id, message.message_id + 1)





